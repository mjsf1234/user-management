/// <reference types="node" />
import * as gax from 'google-gax';
import { Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  The Cloud Scheduler API allows external entities to reliably
 *  schedule asynchronous jobs.
 * @class
 * @memberof v1beta1
 */
export declare class CloudSchedulerClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    cloudSchedulerStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of CloudSchedulerClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP fallback mode.
     *     In fallback mode, a special browser-compatible transport implementation is used
     *     instead of gRPC transport. In browser context (if the `window` object is defined)
     *     the fallback mode is enabled automatically; set `options.fallback` to `false`
     *     if you need to override this behavior.
     */
    constructor(opts?: ClientOptions);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    getJob(request?: protos.google.cloud.scheduler.v1beta1.IGetJobRequest, options?: CallOptions): Promise<[protos.google.cloud.scheduler.v1beta1.IJob, protos.google.cloud.scheduler.v1beta1.IGetJobRequest | undefined, {} | undefined]>;
    getJob(request: protos.google.cloud.scheduler.v1beta1.IGetJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.scheduler.v1beta1.IJob, protos.google.cloud.scheduler.v1beta1.IGetJobRequest | null | undefined, {} | null | undefined>): void;
    getJob(request: protos.google.cloud.scheduler.v1beta1.IGetJobRequest, callback: Callback<protos.google.cloud.scheduler.v1beta1.IJob, protos.google.cloud.scheduler.v1beta1.IGetJobRequest | null | undefined, {} | null | undefined>): void;
    createJob(request?: protos.google.cloud.scheduler.v1beta1.ICreateJobRequest, options?: CallOptions): Promise<[protos.google.cloud.scheduler.v1beta1.IJob, protos.google.cloud.scheduler.v1beta1.ICreateJobRequest | undefined, {} | undefined]>;
    createJob(request: protos.google.cloud.scheduler.v1beta1.ICreateJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.scheduler.v1beta1.IJob, protos.google.cloud.scheduler.v1beta1.ICreateJobRequest | null | undefined, {} | null | undefined>): void;
    createJob(request: protos.google.cloud.scheduler.v1beta1.ICreateJobRequest, callback: Callback<protos.google.cloud.scheduler.v1beta1.IJob, protos.google.cloud.scheduler.v1beta1.ICreateJobRequest | null | undefined, {} | null | undefined>): void;
    updateJob(request?: protos.google.cloud.scheduler.v1beta1.IUpdateJobRequest, options?: CallOptions): Promise<[protos.google.cloud.scheduler.v1beta1.IJob, protos.google.cloud.scheduler.v1beta1.IUpdateJobRequest | undefined, {} | undefined]>;
    updateJob(request: protos.google.cloud.scheduler.v1beta1.IUpdateJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.scheduler.v1beta1.IJob, protos.google.cloud.scheduler.v1beta1.IUpdateJobRequest | null | undefined, {} | null | undefined>): void;
    updateJob(request: protos.google.cloud.scheduler.v1beta1.IUpdateJobRequest, callback: Callback<protos.google.cloud.scheduler.v1beta1.IJob, protos.google.cloud.scheduler.v1beta1.IUpdateJobRequest | null | undefined, {} | null | undefined>): void;
    deleteJob(request?: protos.google.cloud.scheduler.v1beta1.IDeleteJobRequest, options?: CallOptions): Promise<[protos.google.protobuf.IEmpty, protos.google.cloud.scheduler.v1beta1.IDeleteJobRequest | undefined, {} | undefined]>;
    deleteJob(request: protos.google.cloud.scheduler.v1beta1.IDeleteJobRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.scheduler.v1beta1.IDeleteJobRequest | null | undefined, {} | null | undefined>): void;
    deleteJob(request: protos.google.cloud.scheduler.v1beta1.IDeleteJobRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.scheduler.v1beta1.IDeleteJobRequest | null | undefined, {} | null | undefined>): void;
    pauseJob(request?: protos.google.cloud.scheduler.v1beta1.IPauseJobRequest, options?: CallOptions): Promise<[protos.google.cloud.scheduler.v1beta1.IJob, protos.google.cloud.scheduler.v1beta1.IPauseJobRequest | undefined, {} | undefined]>;
    pauseJob(request: protos.google.cloud.scheduler.v1beta1.IPauseJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.scheduler.v1beta1.IJob, protos.google.cloud.scheduler.v1beta1.IPauseJobRequest | null | undefined, {} | null | undefined>): void;
    pauseJob(request: protos.google.cloud.scheduler.v1beta1.IPauseJobRequest, callback: Callback<protos.google.cloud.scheduler.v1beta1.IJob, protos.google.cloud.scheduler.v1beta1.IPauseJobRequest | null | undefined, {} | null | undefined>): void;
    resumeJob(request?: protos.google.cloud.scheduler.v1beta1.IResumeJobRequest, options?: CallOptions): Promise<[protos.google.cloud.scheduler.v1beta1.IJob, protos.google.cloud.scheduler.v1beta1.IResumeJobRequest | undefined, {} | undefined]>;
    resumeJob(request: protos.google.cloud.scheduler.v1beta1.IResumeJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.scheduler.v1beta1.IJob, protos.google.cloud.scheduler.v1beta1.IResumeJobRequest | null | undefined, {} | null | undefined>): void;
    resumeJob(request: protos.google.cloud.scheduler.v1beta1.IResumeJobRequest, callback: Callback<protos.google.cloud.scheduler.v1beta1.IJob, protos.google.cloud.scheduler.v1beta1.IResumeJobRequest | null | undefined, {} | null | undefined>): void;
    runJob(request?: protos.google.cloud.scheduler.v1beta1.IRunJobRequest, options?: CallOptions): Promise<[protos.google.cloud.scheduler.v1beta1.IJob, protos.google.cloud.scheduler.v1beta1.IRunJobRequest | undefined, {} | undefined]>;
    runJob(request: protos.google.cloud.scheduler.v1beta1.IRunJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.scheduler.v1beta1.IJob, protos.google.cloud.scheduler.v1beta1.IRunJobRequest | null | undefined, {} | null | undefined>): void;
    runJob(request: protos.google.cloud.scheduler.v1beta1.IRunJobRequest, callback: Callback<protos.google.cloud.scheduler.v1beta1.IJob, protos.google.cloud.scheduler.v1beta1.IRunJobRequest | null | undefined, {} | null | undefined>): void;
    listJobs(request?: protos.google.cloud.scheduler.v1beta1.IListJobsRequest, options?: CallOptions): Promise<[protos.google.cloud.scheduler.v1beta1.IJob[], protos.google.cloud.scheduler.v1beta1.IListJobsRequest | null, protos.google.cloud.scheduler.v1beta1.IListJobsResponse]>;
    listJobs(request: protos.google.cloud.scheduler.v1beta1.IListJobsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.scheduler.v1beta1.IListJobsRequest, protos.google.cloud.scheduler.v1beta1.IListJobsResponse | null | undefined, protos.google.cloud.scheduler.v1beta1.IJob>): void;
    listJobs(request: protos.google.cloud.scheduler.v1beta1.IListJobsRequest, callback: PaginationCallback<protos.google.cloud.scheduler.v1beta1.IListJobsRequest, protos.google.cloud.scheduler.v1beta1.IListJobsResponse | null | undefined, protos.google.cloud.scheduler.v1beta1.IJob>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The location name. For example:
     *   `projects/PROJECT_ID/locations/LOCATION_ID`.
     * @param {number} request.pageSize
     *   Requested page size.
     *
     *   The maximum page size is 500. If unspecified, the page size will
     *   be the maximum. Fewer jobs than requested might be returned,
     *   even if more jobs exist; use next_page_token to determine if more
     *   jobs exist.
     * @param {string} request.pageToken
     *   A token identifying a page of results the server will return. To
     *   request the first page results, page_token must be empty. To
     *   request the next page of results, page_token must be the value of
     *   {@link google.cloud.scheduler.v1beta1.ListJobsResponse.next_page_token|next_page_token} returned from
     *   the previous call to {@link google.cloud.scheduler.v1beta1.CloudScheduler.ListJobs|ListJobs}. It is an error to
     *   switch the value of {@link google.cloud.scheduler.v1beta1.ListJobsRequest.filter|filter} or
     *   {@link google.cloud.scheduler.v1beta1.ListJobsRequest.order_by|order_by} while iterating through pages.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Job]{@link google.cloud.scheduler.v1beta1.Job} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listJobsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listJobsStream(request?: protos.google.cloud.scheduler.v1beta1.IListJobsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listJobs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The location name. For example:
     *   `projects/PROJECT_ID/locations/LOCATION_ID`.
     * @param {number} request.pageSize
     *   Requested page size.
     *
     *   The maximum page size is 500. If unspecified, the page size will
     *   be the maximum. Fewer jobs than requested might be returned,
     *   even if more jobs exist; use next_page_token to determine if more
     *   jobs exist.
     * @param {string} request.pageToken
     *   A token identifying a page of results the server will return. To
     *   request the first page results, page_token must be empty. To
     *   request the next page of results, page_token must be the value of
     *   {@link google.cloud.scheduler.v1beta1.ListJobsResponse.next_page_token|next_page_token} returned from
     *   the previous call to {@link google.cloud.scheduler.v1beta1.CloudScheduler.ListJobs|ListJobs}. It is an error to
     *   switch the value of {@link google.cloud.scheduler.v1beta1.ListJobsRequest.filter|filter} or
     *   {@link google.cloud.scheduler.v1beta1.ListJobsRequest.order_by|order_by} while iterating through pages.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Job]{@link google.cloud.scheduler.v1beta1.Job}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * const iterable = client.listJobsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     */
    listJobsAsync(request?: protos.google.cloud.scheduler.v1beta1.IListJobsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.scheduler.v1beta1.IJob>;
    /**
     * Return a fully-qualified job resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} job
     * @returns {string} Resource name string.
     */
    jobPath(project: string, location: string, job: string): string;
    /**
     * Parse the project from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromJobName(jobName: string): string | number;
    /**
     * Parse the location from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromJobName(jobName: string): string | number;
    /**
     * Parse the job from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the job.
     */
    matchJobFromJobName(jobName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
