import { AccountAppFileMappingRepository, BaseLocalRepository, CommunicationMatrixRepository } from '../../repositories';
import { BelongsToAccessor, Getter, HasManyRepositoryFactory, HasOneRepositoryFactory, juggler } from '@loopback/repository';
import { Account, AccountCategory, AccountRelations, AppUser, BankAccount, Cart, Distributor, Goal, HoldingType, Relationship, RiskProfile, RiskProfileQuestionSubmittedAnswer, ServiceProviderAccount, InvestorNominee, DepositDetails, Order, AccountReferral, CsrFatca, AccountAppFileMapping, CommunicationMatrix, TransactionTwoFa } from '../../models';
import { AppUserRepository } from './app-user.repository';
import { AccountCategoryRepository, DistributorRepository, HoldingTypeRepository, RelationshipRepository, RiskProfileRepository } from '../master-data';
import { CartRepository, DepositDetailsRepository, GoalRepository, OrderRepository, TransactionTwoFaRepository } from '../order-execution';
import { ServiceProviderAccountRepository } from '../transaction';
import { BankAccountRepository } from './bank-account.repository';
import { RiskProfileQuestionSubmittedAnswerRepository } from './risk-profile-question-submitted-answer.repository';
import { InvestorNomineeRepository } from './investor-nominee.repository';
import { AccountReferralRepository } from './account-referral.repository';
import { CsrFatcaRepository } from './csr-fatca.repository';
export declare class AccountRepository extends BaseLocalRepository<Account, typeof Account.prototype.id, AccountRelations> {
    readonly primaryHolder: BelongsToAccessor<AppUser, typeof Account.prototype.id>;
    readonly secondaryHolder: BelongsToAccessor<AppUser, typeof Account.prototype.id>;
    readonly tertiaryHolder: BelongsToAccessor<AppUser, typeof Account.prototype.id>;
    readonly primaryNominee: BelongsToAccessor<AppUser, typeof Account.prototype.id>;
    readonly secondaryNominee: BelongsToAccessor<AppUser, typeof Account.prototype.id>;
    readonly tertiaryNominee: BelongsToAccessor<AppUser, typeof Account.prototype.id>;
    readonly executedByAppUser: BelongsToAccessor<AppUser, typeof Account.prototype.id>;
    readonly guardian: BelongsToAccessor<AppUser, typeof Account.prototype.id>;
    readonly nomineeGuardian: BelongsToAccessor<AppUser, typeof Account.prototype.id>;
    readonly riskProfile: BelongsToAccessor<RiskProfile, typeof Account.prototype.id>;
    readonly primaryNomineeRelationship: BelongsToAccessor<Relationship, typeof Account.prototype.id>;
    readonly secondaryNomineeRelationship: BelongsToAccessor<Relationship, typeof Account.prototype.id>;
    readonly tertiaryNomineeRelationship: BelongsToAccessor<Relationship, typeof Account.prototype.id>;
    readonly guardianRelationship: BelongsToAccessor<Relationship, typeof Account.prototype.id>;
    readonly distributor: BelongsToAccessor<Distributor, typeof Account.prototype.id>;
    readonly holdingType: BelongsToAccessor<HoldingType, typeof Account.prototype.id>;
    readonly accountCategory: BelongsToAccessor<AccountCategory, typeof Account.prototype.id>;
    readonly nomineeGuardianRelationship: BelongsToAccessor<Relationship, typeof Account.prototype.id>;
    readonly cart: HasOneRepositoryFactory<Cart, typeof Cart.prototype.id>;
    readonly serviceProviderAccounts: HasManyRepositoryFactory<ServiceProviderAccount, typeof Account.prototype.id>;
    readonly goals: HasManyRepositoryFactory<Goal, typeof Account.prototype.id>;
    readonly bankAccounts: HasManyRepositoryFactory<BankAccount, typeof Account.prototype.id>;
    readonly riskProfileQuestionSubmittedAnswers: HasManyRepositoryFactory<RiskProfileQuestionSubmittedAnswer, typeof Account.prototype.id>;
    readonly investorNominees: HasManyRepositoryFactory<InvestorNominee, typeof InvestorNominee.prototype.pid>;
    readonly accountAppFileMapping: HasManyRepositoryFactory<AccountAppFileMapping, typeof AccountAppFileMapping.prototype.pid>;
    readonly depositDetails: HasManyRepositoryFactory<DepositDetails, typeof Account.prototype.id>;
    readonly orders: HasManyRepositoryFactory<Order, typeof Account.prototype.id>;
    readonly accountReferral: HasOneRepositoryFactory<AccountReferral, typeof Account.prototype.id>;
    readonly csrFatca: HasManyRepositoryFactory<CsrFatca, typeof Account.prototype.id>;
    readonly communicationMatrix: HasManyRepositoryFactory<CommunicationMatrix, typeof Account.prototype.id>;
    readonly transactionTwoFa: HasManyRepositoryFactory<TransactionTwoFa, typeof Account.prototype.id>;
    constructor(dataSource: juggler.DataSource, primaryHolderRepositoryGetter: Getter<AppUserRepository>, secondaryHolderRepositoryGetter: Getter<AppUserRepository>, tertiaryHolderRepositoryGetter: Getter<AppUserRepository>, primaryNomineeRepositoryGetter: Getter<AppUserRepository>, secondaryNomineeRepositoryGetter: Getter<AppUserRepository>, tertiaryNomineeRepositoryGetter: Getter<AppUserRepository>, guardianRepositoryGetter: Getter<AppUserRepository>, nomineeGuardianRepositoryGetter: Getter<AppUserRepository>, riskProfileRepositoryGetter: Getter<RiskProfileRepository>, primaryNomineeRelationshipRepositoryGetter: Getter<RelationshipRepository>, secondaryNomineeRelationshipRepositoryGetter: Getter<RelationshipRepository>, tertiaryNomineeRelationshipRepositoryGetter: Getter<RelationshipRepository>, guardianRelationshipRepositoryGetter: Getter<RelationshipRepository>, nomineeGuardianRelationshipRepositoryGetter: Getter<RelationshipRepository>, distributorRepositoryGetter: Getter<DistributorRepository>, holdingTypeRepositoryGetter: Getter<HoldingTypeRepository>, accountCategoryRepositoryGetter: Getter<AccountCategoryRepository>, cartRepositoryGetter: Getter<CartRepository>, serviceProviderAccountRepositoryGetter: Getter<ServiceProviderAccountRepository>, goalRepositoryGetter: Getter<GoalRepository>, bankAccountRepositoryGetter: Getter<BankAccountRepository>, riskProfileQuestionSubmittedAnswerRepositoryGetter: Getter<RiskProfileQuestionSubmittedAnswerRepository>, investorNomineeRepositoryGetter: Getter<InvestorNomineeRepository>, depositDetailsRepositoryGetter: Getter<DepositDetailsRepository>, orderRepositoryGetter: Getter<OrderRepository>, accountReferralRepositoryGetter: Getter<AccountReferralRepository>, csrFatcaRepositoryGetter: Getter<CsrFatcaRepository>, accountAppFileMappingRepositoryGetter: Getter<AccountAppFileMappingRepository>, communicationMatrixRepositoryGetter: Getter<CommunicationMatrixRepository>, transactionTwoFaRepositoryGetter: Getter<TransactionTwoFaRepository>);
}
