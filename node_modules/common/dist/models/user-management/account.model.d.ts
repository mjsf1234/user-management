import { BaseSQLModel, InvestorNominee, CsrFatca, CommunicationMatrix } from '..';
import { Cart, DepositDetails, Goal, Order, TransactionTwoFa } from '../order-execution';
import { ServiceProviderAccount } from '../transaction';
import { AccountAppFileMapping } from './account-app-file-mapping.model';
import { AccountReferral } from './account-referral.model';
import { BankAccount } from './bank-account.model';
import { RiskProfileQuestionSubmittedAnswer } from './risk-profile-question-submitted-answer.model';
export declare class Account extends BaseSQLModel {
    name: string;
    uniqueId?: string;
    accountStatus: number;
    bosCode?: string;
    nseCode?: string;
    bseCode?: string;
    skippedNominee?: boolean;
    activationDate?: Date;
    isProspect: boolean;
    config?: object;
    remarks?: string;
    accountConfirmationPending: boolean;
    registrationStep?: number;
    isDirectTransactionAllowed: boolean;
    riskProfileUpdateDate?: Date;
    blockedDate?: Date;
    unblockedDate?: Date;
    isPoaApplicable: boolean;
    primaryNomineePercentage?: number;
    secondaryNomineePercentage?: number;
    tertiaryNomineePercentage?: number;
    accountOpeningDate?: Date;
    riskProfileUpdatedDate?: Date;
    isNomineeDetailsUpdated?: boolean;
    primaryHolderId: number;
    secondaryHolderId?: number;
    tertiaryHolderId?: number;
    primaryNomineeId?: number;
    secondaryNomineeId?: number;
    tertiaryNomineeId?: number;
    guardianId?: number;
    riskProfileId?: number;
    primaryNomineeRelationshipId?: number;
    secondaryNomineeRelationshipId?: number;
    tertiaryNomineeRelationshipId?: number;
    guardianRelationshipId?: number;
    distributorId?: number;
    holdingTypeId?: number;
    accountCategoryId?: number;
    nomineeGuardianRelationshipId?: number;
    nomineeGuardianId?: number;
    cart?: Cart;
    serviceProviderAccounts?: ServiceProviderAccount[];
    goals?: Goal[];
    bankAccounts?: BankAccount[];
    riskProfileQuestionSubmittedAnswers?: RiskProfileQuestionSubmittedAnswer[];
    investorNominees?: InvestorNominee[];
    orders?: Order[];
    depositDetails?: DepositDetails[];
    accountReferral?: AccountReferral;
    csrFatca?: CsrFatca[];
    accountAppFileMapping?: AccountAppFileMapping[];
    communicationMatrix?: CommunicationMatrix[];
    transactionTwoFa?: TransactionTwoFa[];
    [prop: string]: any;
    constructor(data?: Partial<Account>);
}
export interface AccountRelations {
}
export declare type AccountWithRelations = Account & AccountRelations;
